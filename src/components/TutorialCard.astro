---
interface Props {
  title?: string;
  description?: string;
  difficulty?: string;
  tags?: string[];
  slug?: string;
  series?: string;
  seriesPartsCount?: number;
  featured?: boolean;
  part?: number;
  estimatedTime?: string;
  publishDate?: Date;
}

const { 
  title = 'Build a Portfolio Website with HTML, CSS, and JavaScript',
  description = 'Step-by-step tutorial to create your own responsive portfolio website from scratch without any frameworks.',
  difficulty = 'beginner',
  tags = ['HTML', 'CSS'],
  slug = '#',
  series,
  seriesPartsCount = 1,
  featured = false,
  part,
  estimatedTime,
  publishDate
} = Astro.props;

const difficultyColors = {
  beginner: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200',
  intermediate: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200',
  advanced: 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200',
};
---

<article class="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 overflow-hidden shadow-sm hover:shadow-md transition-all duration-300 h-full flex">
  <div class={`w-2 ${featured ? 'bg-gradient-to-b from-yellow-400 to-orange-500' : 'bg-gray-900 dark:bg-gray-600'}`}></div>
  <div class="p-6 flex-grow flex flex-col">
    <div class="flex items-center justify-between mb-4">
      <div class="flex items-center gap-3">
        <span class={`inline-block text-xs px-3 py-1 rounded-full font-medium uppercase tracking-wide ${difficultyColors[difficulty]}`}>
          {difficulty}
        </span>
        {part && (
          <span class="bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 text-xs px-2 py-1 rounded-full font-medium">
            Part {part}
          </span>
        )}
        {featured && (
          <span class="bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200 text-xs px-2 py-1 rounded-full font-medium">
            Featured
          </span>
        )}
      </div>
      {publishDate && (
        <time class="text-xs text-gray-500 dark:text-gray-400">
          {publishDate.toLocaleDateString('en-US', { 
            year: 'numeric', 
            month: 'short', 
            day: 'numeric' 
          })}
        </time>
      )}
    </div>
    
    <h3 class="font-bold text-lg mb-2 text-gray-900 dark:text-gray-100 leading-tight line-clamp-2">{title}</h3>
    <p class="text-gray-600 dark:text-gray-400 text-sm mb-4 leading-relaxed line-clamp-3 flex-grow">{description}</p>
    
    <div class="flex flex-wrap gap-2 mb-4">
      {tags.map((tag) => (
        <span class="bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 rounded-full px-3 py-1 text-xs font-medium">
          {tag}
        </span>
      ))}
    </div>
    
    <div class="flex items-center justify-between mt-auto">
      <div class="flex flex-col gap-1">
        {series && (
          <span class="text-xs text-gray-500 dark:text-gray-400 font-medium">{series}</span>
        )}
        <div class="flex items-center gap-3 text-xs text-gray-500 dark:text-gray-400">
          {seriesPartsCount > 1 && (
            <span>{seriesPartsCount} parts series</span>
          )}
          {estimatedTime && (
            <span class="flex items-center gap-1">
              <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              {estimatedTime}
            </span>
          )}
        </div>
      </div>
      <a href={`/tutorials/${slug}`} class="text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 text-sm font-medium inline-flex items-center transition-colors">
        {part ? 'Continue' : 'Start Tutorial'}
        <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
      </a>
    </div>
  </div>
</article>