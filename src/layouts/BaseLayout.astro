---
import Navigation from '@/components/Navigation.astro';
import Footer from '@/components/Footer.astro';
import Analytics from '@/components/Analytics.astro';
import type NavItem from '@/types/NavItem';

interface Props {
  title?: string;
  description?: string;
  image?: string;
  canonical?: string;
  type?: 'website' | 'article';
  publishDate?: Date;
  author?: string;
  tags?: string[];
  noindex?: boolean;
}

const { 
  title = 'codersbox - Programming Blog & Tutorials', 
  description = 'Learn programming, web development, and software engineering through comprehensive articles, tutorials, and project guides. Master JavaScript, TypeScript, React, Node.js, and more.',
  image = '/og-image.jpg',
  canonical,
  type = 'website',
  publishDate,
  author = 'codersbox',
  tags = [],
  noindex = false
} = Astro.props;

const navItems: NavItem[] = [
  {name: 'Home', link: '/'},
  {name: 'Articles', link: '/articles'},
  {name: 'Tutorials', link: '/tutorials'},
  {name: 'Projects', link: '/projects'},
  {name: 'About', link: '/about'},
];

const currentUrl = canonical || Astro.url.href;
const siteUrl = 'https://codersbox.dev';
const fullImageUrl = image.startsWith('http') ? image : `${siteUrl}${image}`;
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  
  <!-- SEO Meta Tags -->
  <title>{title}</title>
  <meta name="description" content={description}>
  <meta name="author" content={author}>
  {tags.length > 0 && <meta name="keywords" content={tags.join(', ')}>}
  <link rel="canonical" href={currentUrl}>
  {noindex && <meta name="robots" content="noindex, nofollow">}
  
  <!-- Open Graph Tags -->
  <meta property="og:type" content={type}>
  <meta property="og:title" content={title}>
  <meta property="og:description" content={description}>
  <meta property="og:url" content={currentUrl}>
  <meta property="og:site_name" content="codersbox">
  <meta property="og:image" content={fullImageUrl}>
  <meta property="og:image:alt" content={title}>
  <meta property="og:locale" content="en_US">
  
  <!-- Twitter Card Tags -->
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:title" content={title}>
  <meta name="twitter:description" content={description}>
  <meta name="twitter:image" content={fullImageUrl}>
  <meta name="twitter:image:alt" content={title}>
  <meta name="twitter:site" content="@codersbox">
  <meta name="twitter:creator" content="@codersbox">
  
  {type === 'article' && publishDate && (
    <>
      <meta property="article:published_time" content={publishDate.toISOString()}>
      <meta property="article:author" content={author}>
      {tags.map(tag => <meta property="article:tag" content={tag}>)}
    </>
  )}
  
  <!-- Favicon and Icons -->
  <link rel="icon" type="image/x-icon" href="/favicon.ico">
  <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
  <link rel="manifest" href="/site.webmanifest">
  
  <!-- Performance Optimizations -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link rel="dns-prefetch" href="https://fonts.googleapis.com">
  
  <!-- Theme Color -->
  <meta name="theme-color" content="#3b82f6">
  <meta name="msapplication-TileColor" content="#3b82f6">
  
  <!-- Structured Data -->
  <script type="application/ld+json">
    {JSON.stringify({
      "@context": "https://schema.org",
      "@type": type === 'article' ? 'Article' : 'WebSite',
      "name": title,
      "description": description,
      "url": currentUrl,
      "publisher": {
        "@type": "Organization",
        "name": "codersbox",
        "url": siteUrl,
        "logo": {
          "@type": "ImageObject",
          "url": `${siteUrl}/logo.png`
        }
      },
      ...(type === 'article' && publishDate && {
        "author": {
          "@type": "Person",
          "name": author
        },
        "datePublished": publishDate.toISOString(),
        "dateModified": publishDate.toISOString(),
        "headline": title,
        "image": fullImageUrl,
        "keywords": tags.join(', ')
      }),
      ...(type === 'website' && {
        "potentialAction": {
          "@type": "SearchAction",
          "target": {
            "@type": "EntryPoint",
            "urlTemplate": `${siteUrl}/search?q={search_term_string}`
          },
          "query-input": "required name=search_term_string"
        }
      })
    })}
  </script>
  
  <!-- Critical CSS and Theme Script -->
  <style>
    /* Prevent FOUC */
    html { visibility: hidden; }
    html.loaded { visibility: visible; }
  </style>
  
  <script>
    // Optimized theme detection with FOUC prevention
    (function() {
      try {
        const stored = localStorage.getItem('theme');
      } catch (e) {}
      // Prevent FOUC
      document.documentElement.classList.add('loaded');
    })();
  </script>
</head>
<body class="bg-gray-100 text-gray-900 min-h-screen">
  <Navigation title="codersbox" nav={navItems} />
  <slot />
  <Footer />
  <Analytics />
  
  <!-- Mermaid Initialization -->
  <script type="module" src="/src/scripts/mermaid-init.js"></script>
</body>
</html>