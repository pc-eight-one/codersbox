---
import Navigation from '@/components/Navigation.astro';
import Footer from '@/components/Footer.astro';
import Analytics from '@/components/Analytics.astro';
import type NavItem from '@/types/NavItem';

interface Props {
  title?: string;
  description?: string;
  image?: string;
  canonical?: string;
  type?: 'website' | 'article';
  publishDate?: Date;
  author?: string;
  tags?: string[];
  noindex?: boolean;
}

const { 
  title = 'codersbox - Programming Blog & Tutorials', 
  description = 'Learn programming, web development, and software engineering through comprehensive articles, tutorials, and project guides. Master JavaScript, TypeScript, React, Node.js, and more.',
  image = '/og-image.jpg',
  canonical,
  type = 'website',
  publishDate,
  author = 'codersbox',
  tags = [],
  noindex = false
} = Astro.props;

const navItems: NavItem[] = [
  {name: 'Home', link: '/'},
  {name: 'Articles', link: '/articles'},
  {name: 'Tutorials', link: '/tutorials'},
  {name: 'Projects', link: '/projects'},
  {name: 'About', link: '/about'},
];

const currentUrl = canonical || Astro.url.href;
const siteUrl = 'https://codersbox.dev';
const fullImageUrl = image.startsWith('http') ? image : `${siteUrl}${image}`;
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  
  <!-- SEO Meta Tags -->
  <title>{title}</title>
  <meta name="description" content={description}>
  <meta name="author" content={author}>
  {tags.length > 0 && <meta name="keywords" content={tags.join(', ')}>}
  <link rel="canonical" href={currentUrl}>
  {noindex && <meta name="robots" content="noindex, nofollow">}
  
  <!-- Open Graph Tags -->
  <meta property="og:type" content={type}>
  <meta property="og:title" content={title}>
  <meta property="og:description" content={description}>
  <meta property="og:url" content={currentUrl}>
  <meta property="og:site_name" content="codersbox">
  <meta property="og:image" content={fullImageUrl}>
  <meta property="og:image:alt" content={title}>
  <meta property="og:locale" content="en_US">
  
  <!-- Twitter Card Tags -->
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:title" content={title}>
  <meta name="twitter:description" content={description}>
  <meta name="twitter:image" content={fullImageUrl}>
  <meta name="twitter:image:alt" content={title}>
  <meta name="twitter:site" content="@codersbox">
  <meta name="twitter:creator" content="@codersbox">
  
  {type === 'article' && publishDate && (
    <>
      <meta property="article:published_time" content={publishDate.toISOString()}>
      <meta property="article:author" content={author}>
      {tags.map(tag => <meta property="article:tag" content={tag}>)}
    </>
  )}
  
  <!-- Favicon and Icons -->
  <link rel="icon" type="image/x-icon" href="/favicon.ico">
  <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
  <link rel="manifest" href="/site.webmanifest">
  
  <!-- Performance Optimizations -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link rel="dns-prefetch" href="https://fonts.googleapis.com">
  
  <!-- Theme Color -->
  <meta name="theme-color" content="#3b82f6">
  <meta name="msapplication-TileColor" content="#3b82f6">
  
  <!-- Structured Data -->
  <script type="application/ld+json">
    {JSON.stringify({
      "@context": "https://schema.org",
      "@type": type === 'article' ? 'Article' : 'WebSite',
      "name": title,
      "description": description,
      "url": currentUrl,
      "publisher": {
        "@type": "Organization",
        "name": "codersbox",
        "url": siteUrl,
        "logo": {
          "@type": "ImageObject",
          "url": `${siteUrl}/logo.png`
        }
      },
      ...(type === 'article' && publishDate && {
        "author": {
          "@type": "Person",
          "name": author
        },
        "datePublished": publishDate.toISOString(),
        "dateModified": publishDate.toISOString(),
        "headline": title,
        "image": fullImageUrl,
        "keywords": tags.join(', ')
      }),
      ...(type === 'website' && {
        "potentialAction": {
          "@type": "SearchAction",
          "target": {
            "@type": "EntryPoint",
            "urlTemplate": `${siteUrl}/search?q={search_term_string}`
          },
          "query-input": "required name=search_term_string"
        }
      })
    })}
  </script>
  
  <!-- Critical CSS and Theme Script -->
  <style>
    /* Prevent FOUC */
    html { visibility: hidden; }
    html.loaded { visibility: visible; }
  </style>
  
  <script>
    // Optimized theme detection with FOUC prevention
    (function() {
      try {
        const stored = localStorage.getItem('theme');
      } catch (e) {}
      // Prevent FOUC
      document.documentElement.classList.add('loaded');
    })();
  </script>
</head>
<body class="bg-gray-100 text-gray-900 min-h-screen">
  <Navigation title="codersbox" nav={navItems} />
  <slot />
  <Footer />
  <Analytics />
  
  <!-- Mermaid Initialization -->
  <script type="module">
    import mermaid from 'mermaid';

    // Configure Mermaid with optimized settings
    mermaid.initialize({
      startOnLoad: false, // We'll manually control initialization
      theme: 'default',
      securityLevel: 'loose',
      fontFamily: 'Inter, system-ui, sans-serif',
      themeVariables: {
        primaryColor: '#3b82f6',
        primaryTextColor: '#1f2937',
        primaryBorderColor: '#e5e7eb',
        lineColor: '#6b7280',
        secondaryColor: '#f3f4f6',
        tertiaryColor: '#ffffff'
      },
      flowchart: {
        htmlLabels: true,
        curve: 'basis',
        useMaxWidth: true,
        padding: 20
      },
      sequence: {
        useMaxWidth: true,
        wrap: true,
        actorMargin: 50,
        boxMargin: 10,
        boxTextMargin: 5,
        noteMargin: 10,
        messageMargin: 35
      }
    });

    // Function to render Mermaid diagrams
    async function renderMermaidDiagrams() {
      console.log('Looking for mermaid diagrams...');

      // Try multiple selectors to find mermaid code blocks
      const selectors = [
        'pre code.language-mermaid',
        'code.language-mermaid',
        'pre[class*="language-mermaid"]',
        '.mermaid'
      ];
      
      // Collect potential code blocks across selectors
      const codeSet = new Set();
      for (const selector of selectors) {
        try {
          const found = document.querySelectorAll(selector);
          if (found.length > 0) {
            console.log(`Found ${found.length} elements with selector: ${selector}`);
            found.forEach(el => codeSet.add(el));
          }
        } catch (e) {
          continue;
        }
      }

      // Also look for any pre element containing typical mermaid keywords
      const allPres = document.querySelectorAll('pre');
      allPres.forEach(pre => {
        if (pre.dataset.mermaidProcessed === 'true') return;
        const text = pre.textContent || pre.innerText;
        if (text && (
          /^(\s*%%.*\n)*\s*(flowchart|graph|sequenceDiagram|classDiagram|stateDiagram)/i.test(text)
        )) {
          console.log('Found potential mermaid diagram in <pre>');
          const codeEl = pre.querySelector('code') || pre;
          codeSet.add(codeEl);
        }
      });
      
      const codeBlocks = Array.from(codeSet);
      console.log(`Processing ${codeBlocks.length} mermaid diagrams...`);
      
      for (let i = 0; i < codeBlocks.length; i++) {
        const element = codeBlocks[i];
        let diagram = element.textContent || element.innerText;
        
        // If it's a code element inside pre, get the parent pre
        let targetElement = element;
        if (element.tagName && element.tagName.toLowerCase() === 'code') {
          const preParent = element.closest('pre');
          if (preParent) {
            targetElement = preParent;
            diagram = element.textContent || element.innerText;
          }
        }
        
        // Skip if already processed
        if (targetElement && targetElement.dataset && targetElement.dataset.mermaidProcessed === 'true') {
          continue;
        }

        if (diagram && diagram.trim()) {
          try {
            const { svg } = await mermaid.render(`mermaid-${i}-${Date.now()}`, diagram.trim());
            
            // Create a container div
            const container = document.createElement('div');
            container.className = 'mermaid-container';
            container.style.cssText = 'display: flex; justify-content: center; align-items: center; margin: 2rem 0; text-align: center;';
            container.innerHTML = svg;
            
            // Replace the target element with our container
            if (targetElement.parentNode) {
              targetElement.parentNode.replaceChild(container, targetElement);
              container.setAttribute('data-mermaid-processed', 'true');
              console.log(`Successfully rendered diagram ${i + 1}`);
            }
            
          } catch (error) {
            console.error('Mermaid rendering error:', error);
            // Show error in place of diagram
            const errorDiv = document.createElement('div');
            errorDiv.style.cssText = 'color: #dc2626; padding: 1rem; border: 1px solid #fca5a5; border-radius: 0.375rem; background-color: #fef2f2; margin: 2rem 0;';
            errorDiv.innerHTML = `<strong>Error rendering diagram:</strong> ${error.message}<br><details><summary>Show diagram source</summary><pre style="margin-top: 0.5rem; font-size: 0.75rem; overflow-x: auto;">${diagram}</pre></details>`;
            
            if (targetElement.parentNode) {
              targetElement.parentNode.replaceChild(errorDiv, targetElement);
            }
          }
        }
      }
    }

    // Initialize when DOM is ready
    function initializeMermaid() {
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', renderMermaidDiagrams);
      } else {
        renderMermaidDiagrams();
      }
    }

    // Initialize on page load
    initializeMermaid();

    // Re-initialize on navigation (for Astro view transitions)
    document.addEventListener('astro:page-load', renderMermaidDiagrams);
  </script>
</body>
</html>